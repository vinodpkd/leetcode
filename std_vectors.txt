The important features of std::vector:

Memory Management:
- Dynamic size adjustment through automatic reallocation and copying
- Contiguous memory storage for cache-friendly operations
- Capacity management via reserve() and shrink_to_fit()
- Memory is automatically freed when vector goes out of scope

Element Access:
- Random access via operator[] and at() (bounds-checked)
- Front and back element access via front() and back()
- Iterator access with begin(), end(), rbegin(), rend()
- Data pointer access via data() for C-style array compatibility

Modification Operations:
- push_back() for adding elements at the end
- emplace_back() for constructing elements in-place
- insert() for adding elements at specific positions
- erase() for removing elements
- clear() for removing all elements
- pop_back() for removing the last element

Capacity Operations:
- size() returns current number of elements
- capacity() returns current allocated space
- empty() checks if vector contains elements
- resize() changes size, with optional value initialization
- reserve() pre-allocates memory without creating elements

Iterator Support:
- Supports random access iterators
- Constant and mutable iterators
- Reverse iterators for backwards traversal
- Iterator invalidation rules when modifying vector

Exception Guarantees:
- Strong exception guarantee for single element operations
- Basic exception guarantee for multiple element operations
- No throw guarantee for operations like reserve()

STL Algorithm Compatibility:
- Works with all standard algorithms
- Supports sorting, searching, and other operations
- Compatible with STL containers and iterators

Performance Characteristics:
- O(1) access time for elements
- O(1) insertion/deletion at the end
- O(n) insertion/deletion at arbitrary positions
- Amortized O(1) for push_back() operations

Let me explain the concept of amortized O(1) for push_back() operations in vectors:

When you push_back() elements into a vector, two scenarios can occur:

1. If there's enough capacity, the element is simply added at the end - this is truly O(1)

2. If capacity is full, the vector needs to:
   - Allocate new larger memory (typically 1.5x or 2x current size)
   - Copy all existing elements to new location
   - Delete old memory
   - Add the new element
   This operation is O(n)

The "amortized" analysis looks at the cost averaged over a sequence of operations. Here's why it works out to O(1):

Let's walk through an example with a vector that doubles in size:
```
Initial capacity: 1
Add 1st element: O(1)
Add 2nd element: O(1) + O(1) copy
Add 3rd element: O(1) + O(2) copy
Add 4th element: O(1) + O(3) copy
Add 5th element: O(1) + O(4) copy
...and so on
```

If we add n elements:
- Total costly operations: log2(n) reallocations
- Total elements copied: 1 + 2 + 4 + 8 + ... + n/2 Ëœ n
- Cost per element = Total cost / n elements
  = O(n) / n = O(1)

So while occasional push_back() operations are O(n), they're rare enough that the average (amortized) cost per operation is constant O(1).

This is why it's recommended to reserve() capacity upfront if you know the eventual size - it avoids these periodic reallocation costs entirely.

Here's a comprehensive program demonstrating all element access functions in std::vector:



```cpp
#include <iostream>
#include <vector>

int main() {
    std::vector<int> numbers = {10, 20, 30, 40, 50};
    
    // 1. operator[] - Unchecked access
    std::cout << "Using operator[]:" << std::endl;
    std::cout << "First element: " << numbers[0] << std::endl;
    std::cout << "Last element: " << numbers[4] << std::endl;
    
    // 2. at() - Bounds-checked access
    try {
        std::cout << "\nUsing at():" << std::endl;
        std::cout << "Third element: " << numbers.at(2) << std::endl;
        // This will throw an exception
        std::cout << numbers.at(10) << std::endl;
    } catch (const std::out_of_range& e) {
        std::cout << "Exception caught: " << e.what() << std::endl;
    }
    
    // 3. front() - Access first element
    std::cout << "\nUsing front():" << std::endl;
    std::cout << "First element: " << numbers.front() << std::endl;
    
    // 4. back() - Access last element
    std::cout << "\nUsing back():" << std::endl;
    std::cout << "Last element: " << numbers.back() << std::endl;
    
    // 5. data() - Get pointer to underlying array
    std::cout << "\nUsing data():" << std::endl;
    int* ptr = numbers.data();
    std::cout << "First element via pointer: " << *ptr << std::endl;
    std::cout << "Second element via pointer: " << *(ptr + 1) << std::endl;
    
    // 6. Iterator access
    std::cout << "\nUsing iterators:" << std::endl;
    
    // Forward iteration
    std::cout << "Forward iteration: ";
    for (auto it = numbers.begin(); it != numbers.end(); ++it) {
        std::cout << *it << " ";
    }
    std::cout << std::endl;
    
    // Reverse iteration
    std::cout << "Reverse iteration: ";
    for (auto it = numbers.rbegin(); it != numbers.rend(); ++it) {
        std::cout << *it << " ";
    }
    std::cout << std::endl;
    
    // 7. Const iterators
    std::cout << "\nUsing const iterators:" << std::endl;
    std::cout << "Const forward iteration: ";
    for (auto it = numbers.cbegin(); it != numbers.cend(); ++it) {
        std::cout << *it << " ";
    }
    std::cout << std::endl;
    
    return 0;
}
```

This program demonstrates:

1. `operator[]` - Fast but unchecked access
2. `at()` - Safe, bounds-checked access with exception handling
3. `front()` - Direct access to first element
4. `back()` - Direct access to last element
5. `data()` - Access to underlying array pointer
6. Iterator access:
   - `begin()` and `end()` for forward iteration
   - `rbegin()` and `rend()` for reverse iteration
7. Const iterators: `cbegin()` and `cend()`

```cpp
#include <iostream>
#include <vector>
#include <string>

void printVector(const std::vector<std::string>& vec, const std::string& msg) {
    std::cout << msg << ": ";
    for(const auto& str : vec) {
        std::cout << str << " ";
    }
    std::cout << std::endl;
}

int main() {
    std::vector<std::string> fruits;
    
    // 1. push_back()
    fruits.push_back("Apple");
    fruits.push_back("Banana");
    printVector(fruits, "After push_back");
    // After push_back: Apple Banana 
    
    // 2. emplace_back() - constructs in-place
    fruits.emplace_back("Orange");
    printVector(fruits, "After emplace_back");
    // After emplace_back: Apple Banana Orange
    
    // 3. insert() at beginning
    fruits.insert(fruits.begin(), "Mango");
    printVector(fruits, "After insert at beginning");
    // After insert at beginning: Mango Apple Banana Orange
    
    // 4. insert() at position
    fruits.insert(fruits.begin() + 2, "Grape");
    printVector(fruits, "After insert at position 2");
    // After insert at position 2: Mango Apple Grape Banana Orange
    
    // 5. insert() multiple elements
    fruits.insert(fruits.end(), 2, "Peach");
    printVector(fruits, "After insert multiple");
    // After insert multiple: Mango Apple Grape Banana Orange Peach Peach
    
    // 6. emplace() - constructs element in-place at position
    fruits.emplace(fruits.begin() + 1, "Kiwi");
    printVector(fruits, "After emplace");
    // After emplace: Mango Kiwi Apple Grape Banana Orange Peach Peach
    
    // 7. pop_back() - removes last element
    fruits.pop_back();
    printVector(fruits, "After pop_back");
    // After pop_back: Mango Kiwi Apple Grape Banana Orange Peach
    
    // 8. erase() single element
    fruits.erase(fruits.begin());
    printVector(fruits, "After erase first");
    // After erase first: Kiwi Apple Grape Banana Orange Peach
    
    // 9. erase() range
    fruits.erase(fruits.begin() + 1, fruits.begin() + 3);
    printVector(fruits, "After erase range");
    // After erase range: Kiwi Banana Orange Peach
    
    // 10. resize() to smaller size
    fruits.resize(2);
    printVector(fruits, "After resize to smaller");
    // After resize to smaller: Kiwi Banana
    
    // 11. resize() to larger size with default value
    fruits.resize(4, "Empty");
    printVector(fruits, "After resize to larger");
    // After resize to larger: Kiwi Banana Empty Empty
    
    // 12. clear() - removes all elements
    fruits.clear();
    std::cout << "After clear, size is: " << fruits.size() << std::endl;
    // After clear, size is: 0
    
    // 13. assign() - replaces all elements
    fruits.assign(3, "New");
    printVector(fruits, "After assign");
    // After assign: New New New
    
    // 14. assign() with iterator range
    std::vector<std::string> other = {"One", "Two", "Three"};
    fruits.assign(other.begin(), other.end());
    printVector(fruits, "After assign with range");
    // After assign with range: One Two Three
    
    return 0;
}
```

This program demonstrates all major modification operations on std::vector:

1. `push_back()` - Adds element at end
2. `emplace_back()` - Constructs element in-place at end
3. `insert()` - Single element insertion
4. `insert()` at specific position
5. `insert()` multiple elements
6. `emplace()` - In-place construction at position
7. `pop_back()` - Removes last element
8. `erase()` single element
9. `erase()` range of elements
10. `resize()` to smaller size
11. `resize()` to larger size with fill value
12. `clear()` - Removes all elements
13. `assign()` with fill
14. `assign()` with iterator range


```cpp
#include <iostream>
#include <vector>

// Helper function to print vector and capacity info
void printVectorInfo(const std::vector<int>& vec, const std::string& msg) {
    std::cout << msg << "\n"
              << "Size: " << vec.size() 
              << ", Capacity: " << vec.capacity() 
              << ", Empty: " << (vec.empty() ? "Yes" : "No") 
              << ", Content: ";
    for(const auto& i : vec) std::cout << i << " ";
    std::cout << std::endl;
}

int main() {
    // 1. Default construction
    // Time: O(1), Space: O(1)
    std::vector<int> numbers;
    printVectorInfo(numbers, "Initial vector");
    // Size: 0, Capacity: 0, Empty: Yes, Content: 
    
    // 2. empty() check
    // Time: O(1), Space: O(1)
    std::cout << "Is empty? " << (numbers.empty() ? "Yes" : "No") << std::endl;
    // Is empty? Yes
    
    // 3. reserve() - pre-allocates memory without creating elements
    // Time: O(n) if reallocation needed, Space: O(n)
    numbers.reserve(5);
    printVectorInfo(numbers, "After reserve(5)");
    // Size: 0, Capacity: 5, Empty: Yes, Content: 
    
    // 4. Push elements to see size vs capacity
    // Time: Amortized O(1), Space: O(1)
    for(int i = 1; i <= 3; ++i) {
        numbers.push_back(i);
    }
    printVectorInfo(numbers, "After adding 3 elements");
    // Size: 3, Capacity: 5, Empty: No, Content: 1 2 3
    
    // 5. size() - current number of elements
    // Time: O(1), Space: O(1)
    std::cout << "Current size: " << numbers.size() << std::endl;
    // Current size: 3
    
    // 6. capacity() - allocated space
    // Time: O(1), Space: O(1)
    std::cout << "Current capacity: " << numbers.capacity() << std::endl;
    // Current capacity: 5
    
    // 7. max_size() - maximum potential size
    // Time: O(1), Space: O(1)
    std::cout << "Max size: " << numbers.max_size() << std::endl;
    // Max size: [system-dependent large number]
    
    // 8. resize() to larger size with default value
    // Time: O(n), Space: O(n)
    numbers.resize(7, 10);
    printVectorInfo(numbers, "After resize(7, 10)");
    // Size: 7, Capacity: 7, Empty: No, Content: 1 2 3 10 10 10 10
    
    // 9. resize() to smaller size
    // Time: O(n), Space: O(1)
    numbers.resize(4);
    printVectorInfo(numbers, "After resize(4)");
    // Size: 4, Capacity: 7, Empty: No, Content: 1 2 3 10
    
    // 10. shrink_to_fit() - reduces capacity to size
    // Time: O(n), Space: O(1)
    numbers.shrink_to_fit();
    printVectorInfo(numbers, "After shrink_to_fit()");
    // Size: 4, Capacity: 4, Empty: No, Content: 1 2 3 10
    
    // 11. clear() - removes all elements but keeps capacity
    // Time: O(n), Space: O(1)
    numbers.clear();
    printVectorInfo(numbers, "After clear()");
    // Size: 0, Capacity: 4, Empty: Yes, Content: 
    
    // 12. Reserve with smaller size - doesn't reduce capacity
    // Time: O(1), Space: O(1)
    numbers.reserve(2);
    printVectorInfo(numbers, "After reserve(2) when capacity is 4");
    // Size: 0, Capacity: 4, Empty: Yes, Content: 
    
    // 13. Testing automatic growth
    // Time: Amortized O(1) per push_back, Space: O(n)
    for(int i = 1; i <= 10; ++i) {
        numbers.push_back(i);
        std::cout << "Added " << i << " - Capacity: " << numbers.capacity() << std::endl;
    }
    // Added 1 - Capacity: 4
    // Added 2 - Capacity: 4
    // Added 3 - Capacity: 4
    // Added 4 - Capacity: 4
    // Added 5 - Capacity: 8
    // Added 6 - Capacity: 8
    // Added 7 - Capacity: 8
    // Added 8 - Capacity: 8
    // Added 9 - Capacity: 16
    // Added 10 - Capacity: 16
    
    return 0;
}
```

This program demonstrates all capacity-related operations for std::vector:

1. `empty()` - Checks if vector has no elements
2. `reserve()` - Pre-allocates memory
3. `size()` - Returns current number of elements
4. `capacity()` - Returns current allocated space
5. `max_size()` - Returns maximum possible size
6. `resize()` - Changes size with optional value initialization
7. `shrink_to_fit()` - Reduces capacity to fit size
8. Automatic capacity growth demonstration

Key observations:
1. Capacity never decreases automatically
2. `reserve()` only increases capacity, never decreases it
3. Vector typically doubles its capacity when growing
4. `shrink_to_fit()` is the only way to reduce capacity
5. `clear()` affects size but not capacity
6. Resizing to a larger size may cause reallocation

The time complexities assume:
- Direct memory access is O(1)
- Memory allocation/deallocation is O(n)
- Element construction/destruction is O(1)

```cpp
#include <iostream>
#include <vector>
#include <algorithm>

template<typename Iterator>
void printRange(Iterator begin, Iterator end, const std::string& msg) {
    std::cout << msg << ": ";
    for (Iterator it = begin; it != end; ++it) {
        std::cout << *it << " ";
    }
    std::cout << std::endl;
}

int main() {
    // Initialize vector - Time: O(n), Space: O(n)
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    
    // 1. Basic forward iteration using begin() and end()
    // Time: O(n), Space: O(1)
    std::cout << "Forward iteration: ";
    for(auto it = numbers.begin(); it != numbers.end(); ++it) {
        std::cout << *it << " ";
    }
    std::cout << std::endl;
    // Forward iteration: 1 2 3 4 5
    
    // 2. Reverse iteration using rbegin() and rend()
    // Time: O(n), Space: O(1)
    std::cout << "Reverse iteration: ";
    for(auto it = numbers.rbegin(); it != numbers.rend(); ++it) {
        std::cout << *it << " ";
    }
    std::cout << std::endl;
    // Reverse iteration: 5 4 3 2 1
    
    // 3. Const iteration using cbegin() and cend()
    // Time: O(n), Space: O(1)
    std::cout << "Const forward iteration: ";
    for(auto it = numbers.cbegin(); it != numbers.cend(); ++it) {
        std::cout << *it << " ";
        // *it = 10; // This would cause compilation error
    }
    std::cout << std::endl;
    // Const forward iteration: 1 2 3 4 5
    
    // 4. Const reverse iteration using crbegin() and crend()
    // Time: O(n), Space: O(1)
    std::cout << "Const reverse iteration: ";
    for(auto it = numbers.crbegin(); it != numbers.crend(); ++it) {
        std::cout << *it << " ";
    }
    std::cout << std::endl;
    // Const reverse iteration: 5 4 3 2 1
    
    // 5. Iterator arithmetic
    // Time: O(1), Space: O(1)
    auto it = numbers.begin();
    std::cout << "Third element using iterator arithmetic: " << *(it + 2) << std::endl;
    // Third element using iterator arithmetic: 3
    
    // 6. Iterator comparison
    // Time: O(1), Space: O(1)
    auto mid = numbers.begin() + numbers.size()/2;
    std::cout << "Comparing iterators: " << std::boolalpha
              << (mid > numbers.begin()) << std::endl;
    // Comparing iterators: true
    
    // 7. Iterator distance
    // Time: O(1) for random access iterators, Space: O(1)
    std::cout << "Distance from begin to mid: " 
              << std::distance(numbers.begin(), mid) << std::endl;
    // Distance from begin to mid: 2
    
    // 8. Iterator invalidation demonstration
    // Time: O(n), Space: O(1)
    auto iter = numbers.begin() + 2;
    std::cout << "Value before modification: " << *iter << std::endl;
    // Value before modification: 3
    
    numbers.insert(numbers.begin(), 0);  // This invalidates iter!
    // Don't use iter after this point without reassignment
    
    // 9. Using iterators with algorithms
    // Time: O(n), Space: O(1)
    std::sort(numbers.begin(), numbers.end());
    printRange(numbers.begin(), numbers.end(), "After sorting");
    // After sorting: 0 1 2 3 4 5
    
    // 10. Partial range operations using iterators
    // Time: O(n), Space: O(1)
    auto start = numbers.begin() + 1;
    auto end = numbers.begin() + 4;
    printRange(start, end, "Partial range");
    // Partial range: 1 2 3
    
    // 11. Modifying elements through iterator
    // Time: O(n), Space: O(1)
    for(auto it = numbers.begin(); it != numbers.end(); ++it) {
        *it *= 2;
    }
    printRange(numbers.begin(), numbers.end(), "After doubling");
    // After doubling: 0 2 4 6 8 10
    
    return 0;
}
```

Key Iterator Features Demonstrated:

1. Forward Iterators:
   - begin(), end()
   - cbegin(), cend()

2. Reverse Iterators:
   - rbegin(), rend()
   - crbegin(), crend()

3. Iterator Operations:
   - Arithmetic (+, -, +=, -=)
   - Comparison (<, >, ==, !=)
   - Element access (*)
   - Member access (->)
   - Increment/Decrement (++, --)

4. Iterator Characteristics:
   - Random access
   - Bidirectional traversal
   - Constant vs mutable access

Important Notes:
1. Vector iterators are random access iterators (most powerful category)
2. Iterator invalidation can occur after:
   - Reallocation (push_back, insert, etc.)
   - Element erasure
   - Vector reallocation
3. Const iterators prevent modification of elements
4. Time complexity is constant O(1) for individual iterator operations
5. Space complexity is constant O(1) for iterator operations


Let me create a detailed comparison of std::vector and std::set features organized by classification:

1. Container Nature
   Vector:
   - Sequential container
   - Contiguous memory storage
   - Elements ordered by index
   - Allows duplicate elements
   - Random access container

   Set:
   - Associative container
   - Node-based storage
   - Elements ordered by value
   - No duplicate elements
   - Bidirectional sequential access

2. Memory Management
   Vector:
   - Dynamic array with automatic growth
   - Contiguous memory allocation
   - Capacity can be reserved
   - Memory freed on destruction
   - Reallocation may occur on insertion

   Set:
   - Node-based allocation
   - Non-contiguous memory
   - No capacity concept
   - Memory freed on destruction
   - No reallocation needed for insertion

3. Element Access
   Vector:
   - operator[] - O(1)
   - at() with bounds checking - O(1)
   - front() and back() - O(1)
   - Random access iterators
   - data() for direct memory access

   Set:
   - No direct element access
   - No subscript operator
   - Only iterator-based access
   - Bidirectional iterators
   - No data() access

4. Search Operations
   Vector:
   - Linear search - O(n)
   - Binary search possible on sorted vectors
   - find() - O(n)
   - No built-in binary search tree

   Set:
   - Logarithmic search - O(log n)
   - Built-in binary search tree
   - find() - O(log n)
   - lower_bound()/upper_bound() - O(log n)

5. Modification Operations
   Vector:
   - push_back() - O(1) amortized
   - insert() - O(n)
   - erase() - O(n)
   - clear() - O(n)
   - resize() - O(n)

   Set:
   - insert() - O(log n)
   - erase() - O(log n)
   - clear() - O(n)
   - No push_back() operation
   - No resize() operation

6. Iterator Support
   Vector:
   - Random access iterators
   - begin(), end()
   - rbegin(), rend()
   - cbegin(), cend()
   - Iterator invalidation on reallocation

   Set:
   - Bidirectional iterators
   - begin(), end()
   - rbegin(), rend()
   - cbegin(), cend()
   - Iterator invalidation only for erased elements

7. Performance Characteristics
   Vector:
   - Fast insertion at back - O(1) amortized
   - Fast access by index - O(1)
   - Slow insertion/deletion in middle - O(n)
   - Cache-friendly due to contiguous storage
   - Poor for frequent insertions/deletions

   Set:
   - Moderate insertion anywhere - O(log n)
   - Moderate access/search - O(log n)
   - Moderate deletion - O(log n)
   - Less cache-friendly due to node-based structure
   - Good for ordered data with frequent insertions/deletions

8. Exception Guarantees
   Vector:
   - Strong guarantee for single element operations
   - Basic guarantee for multiple element operations
   - noexcept for clear() and swap()
   - Exception safety depends on element types

   Set:
   - Strong guarantee for insertions and deletions
   - Basic guarantee for multiple element operations
   - noexcept for clear() and swap()
   - Exception safety depends on element types

9. Special Features
   Vector:
   - Reserve capacity
   - Shrink to fit
   - Compatible with C-style arrays
   - Direct memory access
   - Size vs capacity management

   Set:
   - Automatic ordering
   - Unique elements
   - Key comparison function customizable
   - No capacity management needed
   - Set operations (union, intersection)

Primary Use Cases:
- Vector: When you need fast random access, contiguous memory, or array-like behavior
- Set: When you need ordered unique elements with fast search and don't need random access

